/*
 * This file is generated by jOOQ.
 */
package com.alex.simple.process.jooq.tables;


import com.alex.simple.process.jooq.Indexes;
import com.alex.simple.process.jooq.JPublic;
import com.alex.simple.process.jooq.Keys;
import com.alex.simple.process.jooq.tables.records.JProcessesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * Таблица хранит данные процессов
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JProcesses extends TableImpl<JProcessesRecord> {

    /**
     * The reference instance of <code>public.processes</code>
     */
    public static final JProcesses PROCESSES = new JProcesses();
    private static final long serialVersionUID = 221126618;
    /**
     * The column <code>public.processes.uuid</code>. Идентификатор процесса
     */
    public final TableField<JProcessesRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Идентификатор процесса");
    /**
     * The column <code>public.processes.process_type</code>. Тип процесса
     */
    public final TableField<JProcessesRecord, String> PROCESS_TYPE = createField(DSL.name("process_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Тип процесса");
    /**
     * The column <code>public.processes.context</code>. Контекст процесса
     */
    public final TableField<JProcessesRecord, JSONB> CONTEXT = createField(DSL.name("context"), org.jooq.impl.SQLDataType.JSONB, this, "Контекст процесса");
    /**
     * The column <code>public.processes.retry_count</code>. счетчик попыток на каждом шаге
     */
    public final TableField<JProcessesRecord, Integer> RETRY_COUNT = createField(DSL.name("retry_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "счетчик попыток на каждом шаге");

    /**
     * Create a <code>public.processes</code> table reference
     */
    public JProcesses() {
        this(DSL.name("processes"), null);
    }

    /**
     * Create an aliased <code>public.processes</code> table reference
     */
    public JProcesses(String alias) {
        this(DSL.name(alias), PROCESSES);
    }

    /**
     * Create an aliased <code>public.processes</code> table reference
     */
    public JProcesses(Name alias) {
        this(alias, PROCESSES);
    }

    private JProcesses(Name alias, Table<JProcessesRecord> aliased) {
        this(alias, aliased, null);
    }

    private JProcesses(Name alias, Table<JProcessesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица хранит данные процессов"));
    }

    public <O extends Record> JProcesses(Table<O> child, ForeignKey<O, JProcessesRecord> key) {
        super(child, key, PROCESSES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JProcessesRecord> getRecordType() {
        return JProcessesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSES_PK, Indexes.PROCESSES_UUID_UINDEX);
    }

    @Override
    public UniqueKey<JProcessesRecord> getPrimaryKey() {
        return Keys.PROCESSES_PK;
    }

    @Override
    public List<UniqueKey<JProcessesRecord>> getKeys() {
        return Arrays.<UniqueKey<JProcessesRecord>>asList(Keys.PROCESSES_PK);
    }

    @Override
    public JProcesses as(String alias) {
        return new JProcesses(DSL.name(alias), this);
    }

    @Override
    public JProcesses as(Name alias) {
        return new JProcesses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JProcesses rename(String name) {
        return new JProcesses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JProcesses rename(Name name) {
        return new JProcesses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, JSONB, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
