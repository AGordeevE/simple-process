/*
 * This file is generated by jOOQ.
 */
package com.alex.simple.process.jooq.tables.records;


import com.alex.simple.process.jooq.tables.JProcesses;
import org.jooq.*;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;
import java.util.UUID;


/**
 * Таблица хранит данные процессов
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JProcessesRecord extends UpdatableRecordImpl<JProcessesRecord> implements Record4<UUID, String, JSONB, Integer> {

    private static final long serialVersionUID = 634788044;

    /**
     * Create a detached JProcessesRecord
     */
    public JProcessesRecord() {
        super(JProcesses.PROCESSES);
    }

    /**
     * Create a detached, initialised JProcessesRecord
     */
    public JProcessesRecord(UUID uuid, String processType, JSONB context, Integer retryCount) {
        super(JProcesses.PROCESSES);

        set(0, uuid);
        set(1, processType);
        set(2, context);
        set(3, retryCount);
    }

    /**
     * Getter for <code>public.processes.uuid</code>. Идентификатор процесса
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.processes.uuid</code>. Идентификатор процесса
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.processes.process_type</code>. Тип процесса
     */
    public String getProcessType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.processes.process_type</code>. Тип процесса
     */
    public void setProcessType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.processes.context</code>. Контекст процесса
     */
    public JSONB getContext() {
        return (JSONB) get(2);
    }

    /**
     * Setter for <code>public.processes.context</code>. Контекст процесса
     */
    public void setContext(JSONB value) {
        set(2, value);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>public.processes.retry_count</code>. счетчик попыток на каждом шаге
     */
    public Integer getRetryCount() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>public.processes.retry_count</code>. счетчик попыток на каждом шаге
     */
    public void setRetryCount(Integer value) {
        set(3, value);
    }

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    @Override
    public Row4<UUID, String, JSONB, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, JSONB, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return JProcesses.PROCESSES.UUID;
    }

    @Override
    public Field<String> field2() {
        return JProcesses.PROCESSES.PROCESS_TYPE;
    }

    @Override
    public Field<JSONB> field3() {
        return JProcesses.PROCESSES.CONTEXT;
    }

    @Override
    public Field<Integer> field4() {
        return JProcesses.PROCESSES.RETRY_COUNT;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getProcessType();
    }

    @Override
    public JSONB component3() {
        return getContext();
    }

    @Override
    public Integer component4() {
        return getRetryCount();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getProcessType();
    }

    @Override
    public JSONB value3() {
        return getContext();
    }

    @Override
    public Integer value4() {
        return getRetryCount();
    }

    @Override
    public JProcessesRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public JProcessesRecord value2(String value) {
        setProcessType(value);
        return this;
    }

    @Override
    public JProcessesRecord value3(JSONB value) {
        setContext(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public JProcessesRecord value4(Integer value) {
        setRetryCount(value);
        return this;
    }

    @Override
    public JProcessesRecord values(UUID value1, String value2, JSONB value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }
}
